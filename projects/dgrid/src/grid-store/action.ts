import { createAction, props } from '@ngrx/store';
import * as fromModel from '../models';

export const initGrid = createAction('[DGrid] init grid', props<{ id: string, option?: fromModel.DStoreOption, queryParams?: { [key: string]: any } }>());
export const refreshGrid = createAction('[DGrid] refresh grid', props<{ id: string, queryParams?: { [key: string]: any } }>());
export const loadData = createAction('[DGrid] load data', props<{ id: string }>());
export const setViews = createAction('[DGrid] set views', props<{ id: string; views: Array<fromModel.IFilterView> }>());
export const changePagination = createAction('[DGrid] change pagination', props<{ id: string; page?: number; limit?: number }>());
export const changeActiveView = createAction('[DGrid] change active view', props<{ id: string, viewId: string, initial?: boolean }>());
export const setDatas = createAction('[DGrid] set datas', props<{ id: string, datas: Array<any>, count?: number }>());
export const freezenColumn = createAction('[DGrid] freezen column', props<{ id: string, field: string }>());
export const unFreezenColumn = createAction('[DGrid] unfreezen column', props<{ id: string, field: string }>());
export const changeColumnWidth = createAction('[DGrid] change column width', props<{ id: string, obj: { [key: string]: number } }>());
export const changeAdvanceSettingPanel = createAction('[DGrid] open advance setting panel', props<{ id: string, panel?: string }>());
export const toggleColumnVisible = createAction('[DGrid] toggle column visible', props<{ id: string, field?: string }>());
export const changeColumnOrder = createAction('[DGrid] change column order', props<{ id: string, fields?: Array<string> }>());
export const changeViewMode = createAction('[DGrid] change view mode', props<{ id: string, enable: boolean }>());
export const setSearchKeyword = createAction('[DGrid] set search keyword', props<{ id: string, keyword: string }>());
export const changeSort = createAction('[DGrid] change sort', props<{ id: string, sort: fromModel.ISortEvent }>());
export const resetView = createAction('[DGrid] reset view', props<{ id: string }>());
export const saveView = createAction('[DGrid] save view', props<{ id: string }>());
export const saveViewAndLoadData = createAction('[DGrid] save view and load data', props<{ id: string }>());
export const saveViewAs = createAction('[DGrid] save view as', props<{ id: string, viewName: string }>());
export const clearStoreData = createAction('[DGrid] clear store data', props<{ id: string }>());
